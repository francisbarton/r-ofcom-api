% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/area_query.R
\name{area_query}
\alias{area_query}
\title{Query Ofcom API for data from a sample of postcodes}
\usage{
area_query(
  area = NULL,
  df = NULL,
  col = .data$postcode,
  sample_by = NULL,
  return_errors = FALSE,
  ...
)
}
\arguments{
\item{area}{The name of a local authority area (lower or upper tier) in
England or Wales. If \code{NULL}, then a data frame including a postcode variable
should be supplied instead. If for some reason you supply both, this (\code{area})
will take priority over the \code{df} argument.
\code{tapioca} samples by LSOA by default – supplying \code{prop = 1} to \code{...} will negate
any effect of this, if sampling is undesired (\code{prop = 1} means all postcodes
in the area will be included).}

\item{df}{User-supplied data frame containing a postcode variable.
Default is \code{NULL}.}

\item{col}{The name of the postcode variable in \code{df}. Defaults to \code{postcode}.}

\item{sample_by}{A character vector. Name(s) of variable(s) in \code{df} to group data
by before sampling. Not required when using \code{area} (will just use LSOA).}

\item{return_errors}{Mainly for use as a debug mode. Defaults to \code{FALSE}, meaning
the function will return a nice data frame of just successful results (errors
removed). If you are not getting the results you expect, turn on
\code{return_errors} and the function will instead return a list with
components \code{result} and \code{error} for you to peruse.}

\item{...}{Arguments to pass to \code{dplyr::slice_sample()}. Either \code{prop} =
proportion or \code{n} = number. If empty, will submit just 1 postcode (1 per
group, if grouped). Use with \code{sample_by} in order to group data before
sampling (eg sample 20\% of postcodes in each LSOA).}
}
\value{
Either a tibble of successful results from the API, or a list of results
and errors (if \code{return_errors} is set to \code{TRUE}).
}
\description{
Convenience wrapper around \code{query_api} that includes a way to get a nice
tibble of results from an input df, with the option to easily retrieve
data for all  —  or a sample of  —  postcodes in a local authority area.
}
